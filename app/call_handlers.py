import os
from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.enums import ChatAction
from time import sleep
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

from app.db import requests as rq
from app import keyboards as kb

call_router = Router()
load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))


class Register(StatesGroup):
    name = State()
    phone = State()


class ALL(StatesGroup):
    mode = State()

    name_call = State()

    name_item = State()
    description_item = State()
    price_item = State()
    category_item = State()

    url_image = State()
    item_id = State()

    category_id = State()
    category_name = State()


@call_router.callback_query(F.data == 'start_reg')
async def register(callback: CallbackQuery, state: FSMContext):
    if await rq.is_user(callback.from_user.id):
        await callback.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(0.9)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è üë§')
        await state.set_state(Register.name)
    else:
        await callback.answer()
        await callback.message.answer(text='–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ',
                                      reply_markup=kb.main_menu)


@call_router.callback_query(F.data.startswith('first_bin_'))
async def set_items(callback: CallbackQuery):
    await rq.get_bins(callback.from_user.id, int(callback.data.split('_')[2]))
    await callback.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=await kb.item_buttons_2(int(callback.data.split('_')[2])))


@call_router.callback_query(F.data.startswith('second_bin_'))
async def add_plus_item(callback: CallbackQuery):
    await callback.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)
    await rq.get_bins(callback.from_user.id, int(callback.data.split('_')[2]))


async def complete_my_bin(callback: CallbackQuery):
    my_items = await rq.get_my_bin(callback.from_user.id)
    items_data = {}
    for myitem in my_items:
        item = await rq.get_item(myitem.item)
        if len(item.price.split()) == 6:
            if item.name in items_data:
                items_data[item.name] += int(item.price.split()[4])
            else:
                items_data[item.name] = int(item.price.split()[4])
        else:
            if item.name in items_data:
                items_data[item.name] += int(item.price)
            else:
                items_data[item.name] = int(item.price)
    itemss = []
    for name, price in items_data.items():
        itemss.append(f"{name}: {f'{price} —Ä—É–±–ª–µ–π'}")

    itemss.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞: {sum(items_data.values())} —Ä—É–±–ª–µ–π")
    return itemss


@call_router.callback_query(F.data == 'my_bin')
async def my_bin_call(callback: CallbackQuery):
    itemss = await complete_my_bin(callback)
    if int(itemss[-1].split()[2]) > 0:
        await callback.answer()
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(0.8)
        await callback.message.answer(text='üóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç')
        await callback.message.answer('\n'.join(itemss),
                                      reply_markup=kb.delete_bin)
    else:
        await callback.message.answer(text='üóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@call_router.callback_query(F.data == 'delete_my_bin')
async def my_bin_call(callback: CallbackQuery):
    await callback.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
    await rq.delete_my_bin(callback.from_user.id)


@call_router.callback_query(F.data == 'complete_bin')
async def complete_of(callback: CallbackQuery, state: FSMContext):
    if await rq.is_bin(callback.from_user.id):
        await callback.answer()
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(1)
        await callback.message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.\n'
                                           f'–ü–æ–ª–µ—Ç–µ–ª–∏ üöÄ')
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(1)
        await callback.message.answer(text=f'–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.\n‚ùó –ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å\n'
                                           f'‚ùó –ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤–∞–º –ø–æ–∑–∂–µ',
                                      reply_markup=kb.delivery)
    else:
        await callback.answer()
        await callback.message.answer(text='‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå\nüóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


async def delivery(delivery_way, callback):
    items = await complete_my_bin(callback)
    user = await rq.get_user(callback.from_user.id)
    await callback.answer()
    await callback.message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω üëç\n'
                                       f'‚ùóÔ∏è –í —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π ‚ùóÔ∏è')
    await bot.send_message('5380691019', text=f'–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}\n\n'
                                              f'–ò–º—è: {user.name}\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n–°–ø–æ—Å–æ–±'
                                              f' –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_way}')
    await bot.send_message('5380691019', text='\n'.join(items))


@call_router.callback_query(F.data == 'car')
async def car_call(callback: CallbackQuery):
    await callback.answer()
    delivery_way = '–î–æ—Å—Ç–∞–≤–∫–∞'
    if await rq.is_bin(callback.from_user.id):
        await delivery(delivery_way, callback)
    else:
        await callback.message.answer(text='‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå\nüóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@call_router.callback_query(F.data == 'myself')
async def car_call(callback: CallbackQuery):
    delivery_way = '–°–∞–º–æ–≤—ã–≤–æ–∑'
    if await rq.is_bin(callback.from_user.id):
        await delivery(delivery_way, callback)
    else:
        await callback.message.answer(text='‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå\nüóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


# –ù–∞—á–∞–ª–æ –ê–¥–º–∏–Ω —á–∞—Å—Ç–∏
@call_router.callback_query(F.data == 'add_category')
async def add_cat(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await state.set_state(ALL.category_name)
    await state.update_data(name_call='add_category')


@call_router.callback_query(F.data.startswith('category_'))
async def add_item_name(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data['name_call'] == 'add_item':
        await callback.answer()
        await state.update_data(name_call='add_item')
        await state.update_data(category_item=int(callback.data.split('_')[1]))
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(ALL.name_item)
    elif data['name_call'] == 'add_image':
        await callback.answer()
        await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                                      reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
        await state.update_data(name_call='add_image')
        await state.update_data(mode='admin')
    elif data['name_call'] == 'delete_item':
        if await rq.is_items(int(callback.data.split('_')[1])):
            await callback.answer()
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(name_call='delete_item')
            await state.update_data(mode='admin')
        else:
            await callback.answer('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', show_alert=True)
    elif data['name_call'] == 'delete_category':
        if await rq.is_items(int(callback.data.split('_')[1])):
            await callback.answer('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –µ–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å', show_alert=True)
        else:
            await callback.answer()
            await callback.message.answer(text='–≠—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                                          reply_markup=await kb.complete_category(int(callback.data.split('_')[1])))
    elif data['name_call'] == 'edit_category':
        await callback.answer()
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        await state.update_data(category_id=int(callback.data.split('_')[1]))
        await state.update_data(name_call='edit_category')
        await state.set_state(ALL.category_name)
    elif data['name_call'] == 'edit_item':
        await callback.answer()
        if await rq.is_items(int(callback.data.split('_')[1])):
            await callback.answer()
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(name_call='edit_item')
            await state.update_data(mode='admin')
        else:
            await callback.answer('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', show_alert=True)
    elif data['name_call'] == 'delete_image':
        if await rq.is_items(int(callback.data.split('_')[1])):
            await callback.answer()
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(name_call='delete_image')
            await state.update_data(mode='admin')
    elif data['name_call'] == 'choose_category':
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(0.6)
        await callback.answer()
        if int(callback.data.split('_')[1]) == 1:
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ç üéÇ',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(mode='public')
        elif int(callback.data.split('_')[1]) == 2:
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å–µ—Ä—Ç üç©',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(mode='public')
        elif int(callback.data.split('_')[1]) == 3:
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–ª–µ—Ç ü•ê',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(mode='public')
        else:
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ü•Æ',
                                          reply_markup=await kb.set_items(int(callback.data.split('_')[1])))
            await state.update_data(mode='public')


@call_router.callback_query(F.data == 'add_item')
async def add_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data == 'add_image')
async def add_im(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.set_category())


@call_router.callback_query(F.data.startswith('item_'))
async def add_images(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data['mode'] == 'admin':
        if data['name_call'] == 'add_image':
            await callback.answer()
            await state.update_data(item_id=int(callback.data.split('_')[1]))
            await callback.message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.image)
        if data['name_call'] == 'delete_item':
            await callback.answer()
            await rq.delete_item(int(callback.data.split('_')[1]))
            await callback.message.answer(text='–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω')
        if data['name_call'] == 'edit_item':
            await callback.answer()
            await state.update_data(item_id=int(callback.data.split('_')[1]))
            await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å',
                                          reply_markup=kb.edit_item_panel)
        if data['name_call'] == 'delete_image':
            if await rq.is_images(int(callback.data.split('_')[1])):
                await callback.answer()
                images = await rq.get_image_url(int(callback.data.split('_')[1]))
                for image in images:
                    await callback.message.answer_photo(photo=image)
                    await callback.message.answer(text='–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
                                                  reply_markup=await kb.delete_image())
                    await state.update_data(url_image=image)
                    await state.update_data(item_id=int(callback.data.split('_')[1]))
            else:
                await callback.answer('–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', show_alert=True)
    else:
        await callback.answer()
        images = await rq.get_item_image(int(callback.data.split('_')[1]))
        item_photos = []
        photos = []
        for image in images:
            photos.append(f'{image.url}')
        for photo in photos:
            item_photos.append(InputMediaPhoto(type='photo', media=photo))
        item = await rq.get_item(int(callback.data.split('_')[1]))
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.UPLOAD_PHOTO)
        sleep(0.8)
        await callback.message.answer_media_group(media=item_photos)
        await bot.send_chat_action(callback.message.from_user.id, action=ChatAction.TYPING)
        sleep(0.8)
        await callback.message.answer(text=f'{item.name}\n\n'
                                           f'–û–ø–∏—Å–∞–Ω–∏–µ: \n{item.description}\n\n'
                                           f'–¶–µ–Ω–∞ {item.price}',
                                      reply_markup=await kb.item_buttons(int(callback.data.split('_')[1])))


@call_router.callback_query(F.data == 'add_url')
async def add_ur(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ Url')
    await state.set_state(ALL.url_image)


@call_router.callback_query(F.data == 'close')
async def close(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',
                                  reply_markup=kb.admin_panel)


@call_router.callback_query(F.data == 'delete_item')
async def delete_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data == 'delete_category')
async def delete_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data.startswith('complete_category'))
async def delete_category(callback: CallbackQuery):
    await callback.answer()
    print(int(callback.data.split('_')[2]))
    await rq.delete_category(int(callback.data.split('_')[2]))
    await callback.message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞')


@call_router.callback_query(F.data == 'edit_category')
async def edit_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data == 'edit_item')
async def edit_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data == 'edit_item_name')
async def edit_item_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    item = await rq.get_item(data['item_id'])
    await callback.message.answer(text=f'–ü—Ä–æ—à–ª–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {item.name}')
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    await state.set_state(ALL.name_item)
    await state.update_data(name_call=callback.data)


@call_router.callback_query(F.data == 'edit_item_description')
async def edit_item_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    item = await rq.get_item(data['item_id'])
    await callback.message.answer(text=f'–ü—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {item.description}')
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await state.set_state(ALL.description_item)
    await state.update_data(name_call=callback.data)


@call_router.callback_query(F.data == 'edit_item_price')
async def edit_item_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    item = await rq.get_item(data['item_id'])
    await callback.message.answer(text=f'–ü—Ä–æ—à–ª–∞—è —Ü–µ–Ω–∞: {item.price}')
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
    await state.set_state(ALL.price_item)
    await state.update_data(name_call=callback.data)


@call_router.callback_query(F.data == 'delete_image')
async def delete_image(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(name_call=callback.data)
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                  reply_markup=await kb.set_category())


@call_router.callback_query(F.data.startswith('delete_image_'))
async def delete_image(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if await rq.is_image(data['url_image']):
        await rq.del_image(data['url_image'])
        await callback.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
        await callback.message.edit_reply_markup(reply_markup=await kb.again_add_image())
        await state.update_data(url_image=data['url_image'])
        await state.update_data(item_id=data['item_id'])
    else:
        await callback.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


@call_router.callback_query(F.data == 'again_add_image')
async def again_add_image(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await rq.add_image(data['url_image'], data['item_id'])
    await callback.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=await kb.delete_image())

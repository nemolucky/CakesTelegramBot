import os
from aiogram import Router, F, Bot
from aiogram.types import Message, InputMediaPhoto
from aiogram.enums import ChatAction
from time import sleep
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from random import randint

from app.db import requests as rq
from app import keyboards as kb
from app.call_handlers import Register
from app.call_handlers import ALL

router = Router()

load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))


@router.message(CommandStart())
async def cmd(message: Message, state: FSMContext):
    await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    sleep(0.8)
    file = 'https://56cbf095-b352-4813-87c5-21e64c2cd347.selstorage.ru/start/photo_2024-05-13_21-59-50.jpg'
    await message.answer_photo(photo=file, caption='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –ª—é–±–∏—Ç–µ–ª–∏ —Ç–æ—Ä—Ç–æ–≤, –¥–µ—Å–µ—Ä—Ç–æ–≤ –∏ –≤—ã–ø–µ—á–∫–∏!'
                                                   f' –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–ª–µ–Ω–∞, –∏ —è –∫–æ–Ω–¥–∏—Ç–µ—Ä üë©üèº‚Äçüç≥. –Ø —Å–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ '
                                                   f'–≤–∫—É—Å–Ω—ã–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ —Ç–æ—Ä—Ç—ã üç∞, –ø–∏—Ä–æ–∂–Ω—ã–µ ü•Æ, –∫–∞–ø–∫–µ–π–∫–∏ ü•ß –∏ –¥—Ä—É–≥–∏–µ'
                                                   f' —Å–ª–∞–¥–æ—Å—Ç–∏.\n'
                                                   f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–µ—Å–µ—Ä—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å,'
                                                   f' –≤ —ç—Ç–æ–º –±–æ—Ç–µ!'
                                                   f'–í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–∏–º—ã–µ –≤–∫—É—Å—ã, –∞ —è –ø–æ–∑–∞–±–æ—á—É—Å—å –æ —Ç–æ–º,'
                                                   f' —á—Ç–æ–±—ã –≤–∞—à –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å—Ç–∞–ª –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º.\n'
                                                   f'–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –ï–ª–µ–Ω–∞.')
    await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    sleep(0.8)
    await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=kb.reg)


@router.message(Command('finish_admin'))
async def finish_admin(message: Message, state: FSMContext):
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞', reply_markup=kb.main_menu)
    await state.update_data(mode='public')


@router.message(Register.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.phone)
    await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    sleep(0.8)
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω üì≤\n–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π Ô∏è‚ùó‚ùóÔ∏è',
                         reply_markup=kb.register_number_button)


@router.message(Register.phone)
async def reg_phone(message: Message, state: FSMContext):
    if not message.text:
        await state.update_data(phone=message.contact.phone_number)
        data = await state.get_data()
        await rq.register_user(message.from_user.id, data['name'], data['phone'],
                               message.from_user.username)
        await state.clear()
        await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
        sleep(0.8)
        await message.answer(text=f'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞ üéâ\n\n'
                                  f'–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω üç∞ –ö–∞—Ç–∞–ª–æ–≥', reply_markup=kb.main_menu)
    else:
        await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
        sleep(0.8)
        await message.answer(text='–û—à–∏–±–∫–∞ üîÑ', reply_markup=kb.register_number_button)


@router.message(F.text == 'üç∞ –ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message, state: FSMContext):
    catalog_photo = set()
    all_images = await rq.get_catalog_image()
    photo = []
    for image in all_images:
        photo.append(f'{image.url}')
    while len(catalog_photo) < 4:
        file = photo[randint(0, len(photo) - 1)]
        catalog_photo.add(InputMediaPhoto(type='photo', media=str(file)))
    await bot.send_chat_action(message.from_user.id, action=ChatAction.UPLOAD_PHOTO)
    sleep(0.7)
    await message.answer_media_group(media=catalog_photo)
    await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    sleep(0.7)
    await message.answer(text=f'–¢–æ—Ä—Ç—ã, –¥–µ—Å–µ—Ä—Ç—ã –∏ —Ä—É–ª–µ—Ç—ã –æ—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞ –ï–ª–µ–Ω—ã: –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤–∫—É—Å–∞ –≤ –∫–∞–∂–¥–æ–º –∫—É—Å–æ—á–∫–µ.',
                         reply_markup=await kb.set_category())
    await state.update_data(name_call='choose_category')


async def complete_my_bin(message: Message):
    my_items = await rq.get_my_bin(message.from_user.id)
    items_data = {}
    for myitem in my_items:
        item = await rq.get_item(myitem.item)
        if len(item.price.split()) == 6:
            if item.name in items_data:
                items_data[item.name] += int(item.price.split()[4])
            else:
                items_data[item.name] = int(item.price.split()[4])
        else:
            if item.name in items_data:
                items_data[item.name] += int(item.price)
            else:
                items_data[item.name] = int(item.price)
    itemss = []
    for name, price in items_data.items():
        itemss.append(f"{name}: {f'{price} —Ä—É–±–ª–µ–π'}")

    itemss.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞: {sum(items_data.values())} —Ä—É–±–ª–µ–π")
    return itemss


@router.message(F.text == 'üóë –ö–æ—Ä–∑–∏–Ω–∞')
async def my_bin_(message: Message):
    itemss = await complete_my_bin(message)
    if int(itemss[-1].split()[2]) > 0:
        await bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
        sleep(0.9)
        await message.answer(text='üóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç')
        await message.answer('\n'.join(itemss),
                             reply_markup=kb.delete_bin)
    else:
        await message.answer(text='üóë –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


class SOS(StatesGroup):
    text_msg = State()


@router.message(F.text == 'üÜò –ü–æ–º–æ—â—å')
async def my_bin_(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å')
    await state.set_state(SOS.text_msg)


@router.message(SOS.text_msg)
async def my_bin_(message: Message, state: FSMContext):
    await state.update_data(text_msg=message.text)
    await message.answer(text='–û–∂–∏–¥–∞–π—Ç–µ ‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
    data = await state.get_data()
    await bot.send_message('1474718642', text=f'–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n\n'
                                              f'{data["text_msg"]}')  # '5380691019'
    await state.clear()


# –ù–∞—á–∞–ª–æ –ê–¥–º–∏–Ω —á–∞—Å—Ç–∏
@router.message(Command('admin_panel'))
async def cmd(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv('ADMIN_ID')) or message.from_user.id == int(os.getenv('ADMIN_ID2')):
        await state.update_data(mode='admin')
        await message.answer(text='–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_panel)
    else:
        await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–¥–º–∏–Ω')


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å')
async def add_cmd(message: Message):
    await message.answer(text='–ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', reply_markup=kb.add_panel)


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å')
async def add_cmd(message: Message):
    await message.answer(text='–ü–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb.delete_panel)


@router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
async def add_cmd(message: Message):
    await message.answer(text='–ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=kb.edit_panel)


@router.message(ALL.category_name)
async def add_categ(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['name_call'] == 'add_category':
        await state.update_data(category_name=message.text)
        data = await state.get_data()
        category_name = data['category_name']
        await rq.add_category(category_name)
        await message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    elif data['name_call'] == 'edit_category':
        await state.update_data(category_name=message.text)
        data = await state.get_data()
        category_name = data['category_name']
        await rq.edit_category(category_name, data['category_id'])
        await message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')


@router.message(ALL.name_item)
async def add_item_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['name_call'] == 'add_item':
        await state.update_data(name_item=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(ALL.description_item)
    if data['name_call'] == 'edit_item_name':
        await state.update_data(name_item=message.text)
        data = await state.get_data()
        await rq.edit_item_name(data['name_item'], data['item_id'])
        await message.answer(text='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=kb.edit_item_panel)


@router.message(ALL.description_item)
async def add_item_price(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['name_call'] == 'add_item':
        await state.update_data(description_item=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(ALL.price_item)
    if data['name_call'] == 'edit_item_description':
        await state.update_data(description_item=message.text)
        data = await state.get_data()
        await rq.edit_item_description(data['description_item'], data['item_id'])
        await message.answer(text='–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=kb.edit_item_panel)


@router.message(ALL.price_item)
async def add_item_complete(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['name_call'] == 'add_item':
        await state.update_data(price_item=message.text)
        data = await state.get_data()
        await rq.add_item(data['name_item'], data['description_item'], data['price_item'], data['category_item'])
        await message.answer(text='–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    if data['name_call'] == 'edit_item_price':
        await state.update_data(price_item=message.text)
        data = await state.get_data()
        await rq.edit_item_price(data['price_item'], data['item_id'])
        await message.answer(text='–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',
                             reply_markup=kb.edit_item_panel)


@router.message(ALL.url_image)
async def add_url_complete(message: Message, state: FSMContext):
    await state.update_data(url_image=message.text)
    data = await state.get_data()
    await rq.add_image(data['url_image'], data['item_id'])
    await message.answer(text='–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=kb.image)
